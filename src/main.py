#!/usr/bin/env python3
"""
rmperplexitycitations - Remove citations and URLs from Perplexity.ai markdown content
"""

import re
import sys
from pathlib import Path
from typing import Optional

import click
import pyperclip


def remove_citations(text: str) -> str:
    """Remove inline citations like [1], [2], [1][3] from text."""
    citation_pattern = r"\[(?:\d+)\](?:\[(?:\d+)\])*"
    return re.sub(citation_pattern, "", text)


def remove_citation_sections(text: str) -> str:
    """Remove citation sections at the bottom of documents."""
    lines = text.split("\n")

    # Find where "Sources" section starts
    sources_start = -1
    for i, line in enumerate(lines):
        if line.strip().lower() in ["sources", "references", "citations"]:
            sources_start = i
            break

    if sources_start != -1:
        # Remove from "Sources" line onwards
        return "\n".join(lines[:sources_start]).rstrip()

    # Fallback: look for patterns of citation lines
    result_lines = []
    in_citation_section = False

    for line in lines:
        # Detect citation patterns like "[1] url" or "1. url" or just "url title"
        if (
            re.match(r"^\s*\[?\d+\]?\s*.*https?://", line)
            or re.match(r"^\s*\d+[\.\)]\s*.*https?://", line)
            or (line.strip().startswith("http") and len(line.split()) <= 10)
        ):
            in_citation_section = True
            continue
        elif in_citation_section and line.strip() == "":
            continue
        elif in_citation_section and not re.match(r"^\s*\[?\d+\]?\s*.*https?://", line):
            # If we're in citation section but this line doesn't look like citation
            if not line.strip().startswith("http") and line.strip():
                in_citation_section = False
                result_lines.append(line)
            continue
        else:
            if not in_citation_section:
                result_lines.append(line)

    return "\n".join(result_lines)


def remove_perplexity_branding(text: str) -> str:
    """Remove Perplexity-specific branding and marketing text."""
    perplexity_patterns = [
        r"(?i)powered by perplexity[^\w]*",
        r"(?i)generated by perplexity[^\w]*",
        r"(?i)perplexity\.ai[^\w]*",
        r"(?i)ask perplexity\s+for\s+more[^\w]*",
        r"(?i)ask perplexity[^\w]*",
        r"(?i)perplexity pro[^\w]*",
        r"(?i)upgrade to perplexity pro[^\w]*",
        r"(?i)try perplexity[^\w]*",
        r"(?i)perplexity search[^\w]*",
    ]

    result = text
    for pattern in perplexity_patterns:
        result = re.sub(pattern, "", result)

    return result


def clean_markdown(text: str) -> str:
    """Clean markdown content by removing citations, URLs, and Perplexity branding."""
    text = remove_citations(text)
    text = remove_citation_sections(text)
    text = remove_perplexity_branding(text)

    lines = text.split("\n")
    cleaned_lines = []
    for line in lines:
        if not (line.strip().startswith("http") and len(line.strip().split()) == 1):
            cleaned_lines.append(line)

    result = "\n".join(cleaned_lines)
    result = re.sub(r"\n{3,}", "\n\n", result)
    return result.strip()


def read_clipboard() -> str:
    """Read content from clipboard."""
    try:
        return pyperclip.paste()
    except Exception as e:
        click.echo(f"Error reading from clipboard: {e}", err=True)
        sys.exit(1)


def write_clipboard(content: str) -> None:
    """Write content to clipboard."""
    try:
        pyperclip.copy(content)
    except Exception as e:
        click.echo(f"Error writing to clipboard: {e}", err=True)
        sys.exit(1)


def read_file(filepath: str) -> str:
    """Read content from file."""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        click.echo(f"Error reading file {filepath}: {e}", err=True)
        sys.exit(1)


def write_file(filepath: str, content: str) -> None:
    """Write content to file."""
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(content)
    except Exception as e:
        click.echo(f"Error writing file {filepath}: {e}", err=True)
        sys.exit(1)


@click.command()
@click.option(
    "--input-file",
    "-i",
    type=click.Path(exists=True),
    help="Input file path (default: read from clipboard)",
)
@click.option(
    "--output-file",
    "-o",
    type=click.Path(),
    help="Output file path (default: write to clipboard)",
)
@click.option(
    "--clipboard-input",
    "-ci",
    is_flag=True,
    default=False,
    help="Force read from clipboard",
)
@click.option(
    "--clipboard-output",
    "-co",
    is_flag=True,
    default=False,
    help="Force write to clipboard",
)
def main(
    input_file: Optional[str],
    output_file: Optional[str],
    clipboard_input: bool,
    clipboard_output: bool,
) -> None:
    """Remove citations and URLs from Perplexity.ai markdown content.

    By default, reads from clipboard and writes back to clipboard.
    Use flags to specify file input/output combinations.
    """

    if input_file and clipboard_input:
        click.echo(
            "Error: Cannot specify both --input-file and --clipboard-input", err=True
        )
        sys.exit(1)

    if output_file and clipboard_output:
        click.echo(
            "Error: Cannot specify both --output-file and --clipboard-output", err=True
        )
        sys.exit(1)

    if input_file:
        content = read_file(input_file)
    else:
        content = read_clipboard()

    if not content.strip():
        click.echo("Warning: No content found", err=True)
        sys.exit(1)

    cleaned_content = clean_markdown(content)

    if output_file:
        write_file(output_file, cleaned_content)
        click.echo(f"Cleaned content written to {output_file}")
    else:
        write_clipboard(cleaned_content)
        click.echo("Cleaned content copied to clipboard")


if __name__ == "__main__":
    main()
